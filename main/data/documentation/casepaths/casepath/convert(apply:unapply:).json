{"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/convert(apply:unapply:)","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Type Method","title":"convert(apply:unapply:)","externalID":"s:7Parsing10ConversionPAAE7convert5apply7unapplyAA03AnyB0Vyqd__qd_0_Gqd_0_Sgqd__c_qd__Sgqd_0_ctAIRszr0_lFZ::SYNTHESIZED::s:9CasePaths0A4PathV","extendedModule":"Parsing","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"symbolKind":"method","modules":[{"name":"CasePaths"}],"role":"symbol"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths","doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/Conversion-Implementations"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"AnyConversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing13AnyConversionV"},{"text":"<","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"A conversion that invokes the given apply and unapply functions.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that attempts to convert an input into an output. "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/apply(_:)"},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}]}],"name":"apply"},{"content":[{"inlineContent":[{"type":"text","text":"A closure that attempts to convert an output into an input. "},{"type":"codeVoice","code":"unapply"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/unapply(_:)"},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}],"type":"paragraph"}],"name":"unapply"}]},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for experimenting with conversions in a lightweight manner, without the ceremony of"},{"type":"text","text":" "},{"type":"text","text":"defining a dedicated type."}]},{"type":"codeListing","syntax":"swift","code":["struct Amount {","  var cents: Int","}","","let amount = Parse(","  .convert(","    apply: { dollars, cents in Amount(cents: dollars * 100 + cents) },","    unapply: { amount in amount.cents.quotientAndRemainder(dividingBy: 100) }","  )",") {","  Digits()","  \".\"","  Digits(2)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If performance is a concern, you should define a custom type that conforms to "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":" "},{"type":"text","text":"instead, which avoids the overhead of escaping closures, gives the compiler the ability to"},{"type":"text","text":" "},{"type":"text","text":"better optimize, and puts your in a better position to test the conversion."}]},{"type":"codeListing","syntax":"swift","code":["struct AmountConversion: Conversion {","  func apply(_ dollarsAndCents: (Int, Int)) -> Amount {","    return Amount(cents: dollarsAndCents.0 * 100 + dollarsAndCents.1)","  }","","  func unapply(_ amount: Amount) -> (Int, Int) {","    amount.cents.quotientAndRemainder(dividingBy: 100)","  }","}","","let amount = Parse(AmountConversion()) {","  Digits()","  \".\"","  Digits(2)","}"]}],"kind":"content"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/casepaths\/casepath\/convert(apply:unapply:)"]}],"abstract":[{"type":"text","text":"A conversion that invokes the given apply and unapply functions."}],"references":{"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/convert(apply:unapply:)":{"title":"convert(apply:unapply:)","url":"\/documentation\/casepaths\/casepath\/convert(apply:unapply:)","abstract":[{"text":"A conversion that invokes the given apply and unapply functions.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/convert(apply:unapply:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value back into an "},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Conversion"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"url":"\/documentation\/parsing\/anyconversion","abstract":[{"type":"text","text":"A type-erased "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference"},{"type":"text","text":"."}],"role":"symbol","title":"AnyConversion","type":"topic"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/unapply(_:)":{"role":"symbol","title":"unapply(_:)","url":"\/documentation\/casepaths\/casepath\/unapply(_:)","type":"topic","abstract":[{"text":"Attempts to transform an output back into an input.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unapply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/unapply(_:)"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","type":"topic","title":"CasePath","abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a root’s embedded","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value."}],"kind":"symbol","url":"\/documentation\/casepaths\/casepath","role":"symbol","navigatorTitle":[{"text":"CasePath","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CasePath"}]},"doc://co.pointfree.Parsing/documentation/CasePaths":{"role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths","type":"topic","title":"CasePaths","url":"\/documentation\/casepaths","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/apply(_:)":{"title":"apply(_:)","url":"\/documentation\/casepaths\/casepath\/apply(_:)","abstract":[{"text":"Attempts to transform an input into an output.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/apply(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Root"}],"type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/Conversion-Implementations":{"abstract":[],"title":"Conversion Implementations","url":"\/documentation\/casepaths\/casepath\/conversion-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/Conversion-Implementations","role":"collectionGroup","kind":"article","type":"topic"}}}