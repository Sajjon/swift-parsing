{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"abstract":[{"text":"Initializes a parser that attempts to run the given parser many times, accumulating the","type":"text"},{"text":" ","type":"text"},{"text":"outputs into a result.","type":"text"}],"metadata":{"extendedModule":"Parsing","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"I","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"decumulator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(into:_:decumulator:element:)","modules":[{"name":"Parsing"}],"roleHeading":"Initializer","externalID":"s:7Parsing4ManyVA2A6AlwaysVy5InputQzytGRs0_AHRs1_ytRs2_rlE4into_11decumulator7elementACyxq_A2HytGq__yq_z_6OutputQztKcqd__q_KcxyXEtcStRd__7ElementQyd__ANRSlufc","symbolKind":"init","role":"symbol","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Separator","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Terminator","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Printability","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many"]]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"<","kind":"text"},{"text":"I","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initialResult","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"updateAccumulatingResult","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"decumulator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"IteratorProtocol","kind":"typeIdentifier","preciseIdentifier":"s:St"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"}]}],"kind":"declarations"},{"parameters":[{"name":"length","content":[{"type":"paragraph","inlineContent":[{"text":"A bounds that represents the minimum number of times to run this parser and","type":"text"},{"text":" ","type":"text"},{"text":"consider parsing to be successful, and maximum number of times to run this parser before","type":"text"},{"text":" ","type":"text"},{"text":"returning the output.","type":"text"}]}]},{"name":"initialResult","content":[{"type":"paragraph","inlineContent":[{"text":"The value to use as the initial accumulating value.","type":"text"}]}]},{"name":"updateAccumulatingResult","content":[{"inlineContent":[{"type":"text","text":"A closure that updates the accumulating result with each output"},{"type":"text","text":" "},{"type":"text","text":"of the element parser."}],"type":"paragraph"}]},{"name":"element","content":[{"type":"paragraph","inlineContent":[{"text":"A parser to run multiple times to accumulate into a result.","type":"text"}]}]}],"kind":"parameters"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/many\/init(into:_:decumulator:element:)"]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:_:decumulator:element:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(into:_:decumulator:element:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"kind":"text","text":">("},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"decumulator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/many\/init(into:_:decumulator:element:)","kind":"symbol","abstract":[{"text":"Initializes a parser that attempts to run the given parser many times, accumulating the","type":"text"},{"text":" ","type":"text"},{"text":"outputs into a result.","type":"text"}],"title":"init(into:_:decumulator:element:)","type":"topic","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Separator","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Terminator","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Printability","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:_:decumulator:element:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","role":"collection","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"url":"\/documentation\/parsing\/many","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","title":"Many","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Many"}],"kind":"symbol"}}}