{"abstract":[{"text":"Creates a conversion that wraps the given closures in its ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)"},{"text":" ","type":"text"},{"text":"methods, throwing an error when ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" is returned.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/anyconversion\/init(apply:unapply:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion"]]},"metadata":{"externalID":"s:7Parsing13AnyConversionV5apply7unapplyACyxq_Gq_Sgxc_xSgq_ctcfc","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"role":"symbol","symbolKind":"init","modules":[{"name":"Parsing"}],"title":"init(apply:unapply:)","roleHeading":"Initializer"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?)","kind":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that attempts to convert an input into an output. "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)"},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}]}],"name":"apply"},{"content":[{"inlineContent":[{"text":"A closure that attempts to convert an output into an input. ","type":"text"},{"code":"unapply","type":"codeVoice"},{"text":" is executed","type":"text"},{"text":" ","type":"text"},{"text":"each time the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","type":"reference"},{"text":" method is called on the resulting conversion. If the closure","type":"text"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", an error is thrown. Otherwise, the value is unwrapped.","type":"text"}],"type":"paragraph"}],"name":"unapply"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","role":"collection","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/init(apply:unapply:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)","title":"init(apply:unapply:)","role":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"abstract":[{"type":"text","text":"Creates a conversion that wraps the given closures in its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)"},{"type":"text","text":" "},{"type":"text","text":"methods, throwing an error when "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is returned."}],"url":"\/documentation\/parsing\/anyconversion\/init(apply:unapply:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/apply(_:)":{"title":"apply(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","url":"\/documentation\/parsing\/anyconversion\/apply(_:)","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Attempts to transform an input into an output.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"url":"\/documentation\/parsing\/anyconversion","abstract":[{"type":"text","text":"A type-erased "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference"},{"type":"text","text":"."}],"role":"symbol","title":"AnyConversion","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/unapply(_:)":{"title":"unapply(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","url":"\/documentation\/parsing\/anyconversion\/unapply(_:)","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Attempts to transform an output back into an input.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unapply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Input"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value back into an "},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Conversion"}}}