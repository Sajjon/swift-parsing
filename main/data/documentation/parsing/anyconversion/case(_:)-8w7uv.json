{"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/case(_:)-8w7uv","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations"]]},"sections":[],"abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/anyconversion\/case(_:)-8w7uv"]}],"metadata":{"symbolKind":"method","modules":[{"name":"Parsing"}],"roleHeading":"Type Method","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"externalID":"s:7Parsing10ConversionPAAE4casey9CasePaths0D4PathVyqd_0_qd__Gqd_0_qd__cAHRszr0_lFZ::SYNTHESIZED::s:7Parsing13AnyConversionV","extendedModule":"Parsing","title":"case(_:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Enum"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"text":"A conversion that can embed the associated values of an enum case into the case,","type":"text"},{"text":" ","type":"text"},{"text":"and extract the associated values from the case.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"An embed function where "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"type":"codeVoice","code":"Enum"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}],"type":"paragraph"}],"name":"embed"}]},{"content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Useful for transforming the output of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true,"type":"reference"},{"text":" into an enum:","type":"text"}]},{"syntax":"swift","code":["enum Expression {","  case add(Int, Int)","  ...","}","","let add = ParsePrint(.case(Expression.add)) {","  Int.parser()","  \"+\"","  Int.parser()","}","try add.parse(\"1+2\")  \/\/ Expression.add(1, 2)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To transform the output of a "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true},{"type":"text","text":" into a struct, see "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","isActive":true},{"type":"text","text":"."}]}],"kind":"content"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/Conversion-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/parsing\/anyconversion\/conversion-implementations","abstract":[],"title":"Conversion Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value back into an "},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Conversion"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/memberwise(_:)":{"abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/anyconversion\/memberwise(_:)","kind":"symbol","role":"symbol","title":"memberwise(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","type":"topic","title":"CasePath","abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a root’s embedded","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value."}],"kind":"symbol","url":"\/documentation\/casepaths\/casepath","role":"symbol","navigatorTitle":[{"text":"CasePath","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CasePath"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/case(_:)-8w7uv":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/case(_:)-8w7uv","title":"case(_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Converts the associated values of an enum case into the case, and an enum case into its"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"role":"symbol","url":"\/documentation\/parsing\/anyconversion\/case(_:)-8w7uv","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Enum"},{"kind":"text","text":">(("},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","role":"symbol","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"url":"\/documentation\/parsing\/parserprinter","kind":"symbol","title":"ParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"url":"\/documentation\/parsing\/anyconversion","abstract":[{"type":"text","text":"A type-erased "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference"},{"type":"text","text":"."}],"role":"symbol","title":"AnyConversion","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","role":"collection","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing"}}}