{"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse\/init(with:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"build"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}]}]},{"parameters":[{"name":"with","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser builder that will accumulate non-void outputs in a tuple."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"Used to combine the non-void outputs from multiple parsers into a single output by running"},{"type":"text","text":" "},{"type":"text","text":"each parser in sequence and bundling the results up into a tuple."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, the following parser parses a double, skips a comma, and then parses another"},{"type":"text","text":" "},{"type":"text","text":"double before returning a tuple of each double."}],"type":"paragraph"},{"code":["let coordinate = Parse {","  Double.parser()","  \",\"","  Double.parser()","}","","try coordinate.parse(\"1,2\")  \/\/ (1.0, 2.0)"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"modules":[{"name":"Parsing"}],"externalID":"s:7Parsing5ParseV4withACyxGxyXE_tcfc","title":"init(with:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"roleHeading":"Initializer","symbolKind":"init"},"abstract":[{"text":"An entry point into ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true},{"text":" syntax.","type":"text"}],"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parse\/init(with:)"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"role":"symbol","url":"\/documentation\/parsing\/parse","navigatorTitle":[{"kind":"identifier","text":"Parse"}],"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"title":"Parse"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"role":"symbol","url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"title":"ParserBuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse/init(with:)":{"role":"symbol","abstract":[{"type":"text","text":"An entry point into "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},{"type":"text","text":" syntax."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse\/init(with:)","kind":"symbol","title":"init(with:)","url":"\/documentation\/parsing\/parse\/init(with:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","role":"collection","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing"}}}