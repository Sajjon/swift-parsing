{"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"],"kind":"relationships"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/init()","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/init(throwing:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/parse(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/print(_:into:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/ParserPrinter-Implementations"],"generated":true}],"sections":[],"variants":[{"paths":["\/documentation\/parsing\/fail"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"kind":"symbol","abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"metadata":{"navigatorTitle":[{"text":"Fail","kind":"identifier"}],"title":"Fail","role":"symbol","externalID":"s:7Parsing4FailV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}],"symbolKind":"struct","roleHeading":"Structure","modules":[{"name":"Parsing"}]},"seeAlsoSections":[{"title":"Common parsers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"],"generated":true}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fail"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While not very useful on its own, this parser can be helpful when combined with other parsers or"},{"type":"text","text":" "},{"type":"text","text":"operators."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, it can be used to conditionally causing parsing to fail when used with"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)"},{"type":"text","text":":"}]},{"code":["struct OddFailure: Error {}","","let evens = Int.parser().flatMap {","  if $0.isMultiple(of: 2) {","    Always($0)","  } else {","    Fail<Substring, Int>(throwing: OddFailure())","  }","}","","try evens.parse(\"42\")  \/\/ 42","","try evens.parse(\"123\")","\/\/ error: OddFailure()","\/\/  --> input:1:1-3","\/\/ 1 | 123","\/\/   | ^^^"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"navigatorTitle":[{"text":"Peek","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"title":"Peek","url":"\/documentation\/parsing\/peek","abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"navigatorTitle":[{"kind":"identifier","text":"Prefix"}],"abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Prefix"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","kind":"symbol","title":"Prefix","role":"symbol","type":"topic","url":"\/documentation\/parsing\/prefix"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"navigatorTitle":[{"text":"FromSubstring","kind":"identifier"}],"type":"topic","role":"symbol","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromSubstring","kind":"identifier"}],"title":"FromSubstring","url":"\/documentation\/parsing\/fromsubstring","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"navigatorTitle":[{"kind":"identifier","text":"Stream"}],"url":"\/documentation\/parsing\/stream","role":"symbol","type":"topic","title":"Stream","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"navigatorTitle":[{"kind":"identifier","text":"Rest"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}],"title":"Rest","url":"\/documentation\/parsing\/rest","abstract":[{"type":"text","text":"A parser that consumes everything to the end of the collection and returns this subsequence as"},{"type":"text","text":" "},{"type":"text","text":"its output."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"navigatorTitle":[{"text":"FromUnicodeScalarView","kind":"identifier"}],"type":"topic","role":"symbol","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromUnicodeScalarView","kind":"identifier"}],"title":"FromUnicodeScalarView","url":"\/documentation\/parsing\/fromunicodescalarview","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView"},"doc://co.pointfree.Parsing/documentation/Parsing/From":{"navigatorTitle":[{"text":"From","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"From","kind":"identifier"}],"title":"From","url":"\/documentation\/parsing\/from","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","role":"symbol","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"url":"\/documentation\/parsing\/parserprinter","kind":"symbol","title":"ParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"navigatorTitle":[{"kind":"identifier","text":"PrefixUpTo"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}],"title":"PrefixUpTo","url":"\/documentation\/parsing\/prefixupto","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail/print(_:into:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"print(_:into:)","kind":"symbol","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/print(_:into:)","url":"\/documentation\/parsing\/fail\/print(_:into:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail/init(throwing:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"throwing","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/fail\/init(throwing:)","abstract":[{"text":"Creates a parser that throws an error when it runs.","type":"text"}],"role":"symbol","title":"init(throwing:)","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/init(throwing:)"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","role":"collection","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUTF8View"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"FromUTF8View"}],"url":"\/documentation\/parsing\/fromutf8view","role":"symbol","type":"topic","title":"FromUTF8View","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","deprecated":true},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"LazyParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"type":"topic","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","kind":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"navigatorTitle":[{"kind":"identifier","text":"Optionally"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"title":"Optionally","url":"\/documentation\/parsing\/optionally","abstract":[{"type":"text","text":"A parser that runs the given parser and succeeds with "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if it fails."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"url":"\/documentation\/parsing\/uuid","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","title":"UUID","abstract":[{"type":"text","text":"A parser that consumes a "},{"code":"UUID","type":"codeVoice"},{"type":"text","text":" value from the beginning of a string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"role":"symbol","url":"\/documentation\/parsing\/parse","navigatorTitle":[{"kind":"identifier","text":"Parse"}],"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"title":"Parse"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixThrough","kind":"identifier"}],"title":"PrefixThrough","url":"\/documentation\/parsing\/prefixthrough","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough"},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"navigatorTitle":[{"kind":"identifier","text":"Not"}],"kind":"symbol","abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Not"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","type":"topic","title":"Not","role":"symbol","url":"\/documentation\/parsing\/not"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"navigatorTitle":[{"text":"Whitespace","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Whitespace","kind":"identifier"}],"title":"Whitespace","url":"\/documentation\/parsing\/whitespace","abstract":[{"type":"text","text":"A parser that consumes whitespace from the beginning of input."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"url":"\/documentation\/parsing\/oneof","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"role":"symbol","title":"OneOf","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"First"}],"abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}],"navigatorTitle":[{"kind":"identifier","text":"First"}],"url":"\/documentation\/parsing\/first","role":"symbol","type":"topic","title":"First","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First"},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"navigatorTitle":[{"text":"End","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}],"title":"End","url":"\/documentation\/parsing\/end","abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End"},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"abstract":[{"type":"text","text":"A parser that consumes the characters contained in a "},{"code":"CharacterSet","type":"codeVoice"},{"type":"text","text":" from the beginning of a string."}],"url":"\/documentation\/parsing\/characterset","role":"article","type":"topic","title":"CharacterSet","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"type":"topic","role":"article","title":"Int","url":"\/documentation\/parsing\/int","abstract":[{"type":"text","text":"A parser that consumes an integer from the beginning of a string."}],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"type":"topic","role":"article","title":"Float","url":"\/documentation\/parsing\/float","abstract":[{"type":"text","text":"A parser that consumes a floating-point number from the beginning of a string."}],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float"},"doc://co.pointfree.Parsing/documentation/Parsing/Digits":{"navigatorTitle":[{"kind":"identifier","text":"Digits"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"}],"title":"Digits","url":"\/documentation\/parsing\/digits","abstract":[{"type":"text","text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code"},{"type":"text","text":" "},{"type":"text","text":"units."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"url":"\/documentation\/parsing\/newline","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","title":"Newline","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Newline"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail/ParserPrinter-Implementations":{"abstract":[],"role":"collectionGroup","type":"topic","kind":"article","title":"ParserPrinter Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/ParserPrinter-Implementations","url":"\/documentation\/parsing\/fail\/parserprinter-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"type":"topic","role":"article","title":"CaseIterable","url":"\/documentation\/parsing\/caseiterable","abstract":[{"type":"text","text":"A parser-printer that consumes a case-iterable, raw representable value from the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"string."}],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Lazy"}],"role":"symbol","url":"\/documentation\/parsing\/lazy","navigatorTitle":[{"kind":"identifier","text":"Lazy"}],"abstract":[{"type":"text","text":"A parser that waits for a call to its "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)"},{"type":"text","text":" method before running the given closure to"},{"type":"text","text":" "},{"type":"text","text":"create a parser for the given input."}],"title":"Lazy"},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"type":"topic","role":"article","title":"String","url":"\/documentation\/parsing\/string","abstract":[{"type":"text","text":"A parser that consumes a string literal from the beginning of a string."}],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}],"title":"StartsWith","url":"\/documentation\/parsing\/startswith","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"navigatorTitle":[{"text":"Fail","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}],"title":"Fail","url":"\/documentation\/parsing\/fail","abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail/init()":{"fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"title":"init()","kind":"symbol","abstract":[{"type":"text","text":"Creates a parser that throws an error when it runs."}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/init()","url":"\/documentation\/parsing\/fail\/init()"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"type":"topic","role":"article","title":"Bool","url":"\/documentation\/parsing\/bool","abstract":[{"type":"text","text":"A parser that consumes a Boolean value from the beginning of a string."}],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"url":"\/documentation\/parsing\/many","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","title":"Many","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Many"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail/parse(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/parse(_:)","title":"parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"input."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/fail\/parse(_:)","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"navigatorTitle":[{"text":"Always","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"title":"Always","url":"\/documentation\/parsing\/always","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/flatMap(_:)":{"abstract":[{"text":"Returns a parser that transforms the output of this parser into a new parser.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewParser"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewParser"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"FlatMap","preciseIdentifier":"s:7Parsing7ParsersO7FlatMapV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol","url":"\/documentation\/parsing\/parser\/flatmap(_:)","title":"flatMap(_:)","kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail/Parser-Implementations":{"abstract":[],"role":"collectionGroup","url":"\/documentation\/parsing\/fail\/parser-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/Parser-Implementations","title":"Parser Implementations","kind":"article","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Consumed":{"navigatorTitle":[{"text":"Consumed","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Consumed","kind":"identifier"}],"title":"Consumed","url":"\/documentation\/parsing\/consumed","abstract":[{"type":"text","text":"A parser that returns the subsequence of input consumed by another parser."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"role":"symbol","url":"\/documentation\/parsing\/anyparser","navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"abstract":[{"type":"text","text":"A type-erased parser of "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" from "},{"type":"codeVoice","code":"Input"},{"type":"text","text":"."}],"title":"AnyParser"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"url":"\/documentation\/parsing\/skip","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","title":"Skip","abstract":[{"type":"text","text":"A parser that discards the output of another parser."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Skip"}],"kind":"symbol"}}}