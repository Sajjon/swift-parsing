{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder\/buildEither(second:)"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"buildEither","kind":"identifier"},{"text":"<","kind":"text"},{"text":"TrueParser","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"FalseParser","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"second","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"parser","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"FalseParser","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional","text":"Conditional","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO11ConditionalO"},{"text":"<","kind":"text"},{"text":"TrueParser","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"FalseParser","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TrueParser","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP"},{"text":", ","kind":"text"},{"text":"FalseParser","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP"},{"text":", ","kind":"text"},{"text":"TrueParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"FalseParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"TrueParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"FalseParser","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"codeListing","syntax":"swift","code":["OneOf {","  if useLegacyParser {","    LegacyParser()","  } else {","    NewParser()","  }","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder"]]},"metadata":{"roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"buildEither"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"FalseParser"},{"kind":"text","text":">("},{"kind":"externalParam","text":"second"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO11ConditionalO","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":">"}],"externalID":"s:7Parsing12OneOfBuilderO11buildEither6secondAA7ParsersO11ConditionalOy_xq_Gq__tAA6ParserRzAaKR_5InputQy_ALRtz6OutputQy_AORtzr0_lFZ","modules":[{"name":"Parsing"}],"title":"buildEither(second:)","symbolKind":"method","role":"symbol"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Provides support for ","type":"text"},{"type":"codeVoice","code":"if"},{"text":"-","type":"text"},{"type":"codeVoice","code":"else"},{"text":" statements in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder","type":"reference"},{"text":" blocks, producing a","type":"text"},{"text":" ","type":"text"},{"text":"conditional parser for the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" branch.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/oneofbuilder\/buildeither(second:)"]}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"role":"symbol","url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"title":"Parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional":{"url":"\/documentation\/parsing\/parsers\/conditional","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional","title":"Parsers.Conditional","navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"type":"topic","abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOfBuilder/buildEither(second:)":{"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/oneofbuilder\/buildeither(second:)","abstract":[{"type":"text","text":"Provides support for "},{"type":"codeVoice","code":"if"},{"type":"text","text":"-"},{"type":"codeVoice","code":"else"},{"type":"text","text":" statements in "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder","isActive":true},{"type":"text","text":" blocks, producing a"},{"type":"text","text":" "},{"type":"text","text":"conditional parser for the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" branch."}],"role":"symbol","title":"buildEither(second:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder\/buildEither(second:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"buildEither"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"FalseParser"},{"kind":"text","text":">("},{"kind":"externalParam","text":"second"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO11ConditionalO","kind":"typeIdentifier","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"TrueParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"FalseParser"},{"kind":"text","text":">"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"url":"\/documentation\/parsing\/oneof","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"role":"symbol","title":"OneOf","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","role":"collection","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOfBuilder":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder","type":"topic","role":"symbol","url":"\/documentation\/parsing\/oneofbuilder","title":"OneOfBuilder","navigatorTitle":[{"text":"OneOfBuilder","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOfBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}]}}}